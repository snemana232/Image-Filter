
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.FileReader;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;



/* To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author s1r23
 */
public class NewJFrame extends javax.swing.JFrame {
	
	//This variable is for the .png file to be modified
	File toModify;
	//toModify read in as a buffered image
	BufferedImage original;
	//ending image for toModify to be writtem
	BufferedImage end;
	
	

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        vert = new javax.swing.JMenuItem();
        hor = new javax.swing.JMenuItem();
        blur = new javax.swing.JMenuItem();
        invert = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("This is my open dialog");

        jMenuItem4.setText("jMenuItem4");

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jMenu3.setText("File");

        Open.setText("Open");
        final File toModify;
        final BufferedImage img;
        final BufferedImage result;
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	//make toModify a class constant
                try {
					OpenActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jMenu3.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
                
            }
        });
        jMenu3.add(Exit);

        jMenuBar2.add(jMenu3);

        jMenu1.setText(" Modify Files");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               
            }
        });

        vert.setText("Vertical Reflection (across x-axis)");
        vert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					vertActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jMenu1.add(vert);

        hor.setText(" Horizontal Reflection (across y-axis)");
        hor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					horActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jMenu1.add(hor);

        blur.setText("Blur");
        blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					blurActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jMenu1.add(blur);

        invert.setText(" Invert Colors");
        invert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					invertActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        jMenu1.add(invert);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 180, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 128, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        System.exit(0);
    }                                    

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                     
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            toModify = fileChooser.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                jTextArea2.read( new FileReader( toModify.getAbsolutePath() ), null );
            } catch (IOException ex) {
                System.out.println("problem accessing file"+toModify.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        original = getImage(toModify);
        end = new BufferedImage(original.getWidth(), original.getHeight(), BufferedImage.TYPE_INT_ARGB);
  
    }                                    

    private void blurActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                     
        // TODO add your handling code here:
		// TODO Auto-generated method stub
		for (int x = 0; x < original.getWidth(); x++) {
			for (int y = 0; y < original.getHeight(); y++) {
				end.setRGB(x, y, getNeighAverage(original, x, y, 3).getRGB());
			}
		}
		ImageIO.write(end, "png", toModify);
    }      
    
	private static Color getNeighAverage(BufferedImage original, int initX, int initY, int neighSize) {
		int rTotal = 0;
		int gTotal = 0;
		int bTotal = 0;
		int count = 0;
		for (int x = initX - neighSize; x <= initX + neighSize; x++) {
			for (int y = initY - neighSize; y <= initY + neighSize; y++) {
				if (inbounds(x, y, original)) {
					Color c1 = new Color(original.getRGB(x,  y));
					rTotal += c1.getRed();
					gTotal += c1.getGreen();
					bTotal += c1.getBlue();
					count++;
				}
			}
		}
		return new Color(rTotal/count, gTotal/count, bTotal/count);
	}
	
	private static boolean inbounds(int x, int y, BufferedImage original) {
		// TODO Auto-generated method stub
		return 0 <= x && x < original.getWidth() && 0 <= y && y < original.getHeight();
	}

    private void invertActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                       
        // TODO add your handling code here:
		int max = 255;
		for (int x = 0; x < original.getWidth(); x++) {
			for (int y = 0; y < original.getHeight(); y++) {
				Color pixel = new Color(original.getRGB(x, y));
				int rd = max - pixel.getRed();
				int g = max - pixel.getGreen();
				int b = max - pixel.getBlue();
				end.setRGB(x, y, new Color(rd, g, b).getRGB());
			}
		}
		ImageIO.write(end, "png", toModify);
    }                                      

    private void horActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                    
        // TODO add your handling code here:
		for (int x = 0; x < original.getWidth(); x++) {
			for (int y = 0; y < original.getHeight(); y++) {
				end.setRGB(original.getWidth() - x  -1, y, original.getRGB(x, y));
			}
		}
		ImageIO.write(end, "png", toModify);
    }                                   

    private void vertActionPerformed(java.awt.event.ActionEvent evt) throws IOException {                                     
        // TODO add your handling code here:
		for (int x = 0; x < original.getWidth(); x++) {
			for (int y = 0; y < original.getHeight(); y++) {
				end.setRGB(x,  original.getHeight() - y - 1,  original.getRGB(x, y));
			}
		}
		ImageIO.write(end, "png", toModify);
    }  
    
	public static BufferedImage getImage(File fileName) throws IOException {
		BufferedImage img = null;
		try {
		    img = ImageIO.read(fileName);
		} catch (IOException e) {
			System.out.println("That wasn't supposed to happen: uh - oh");
			System.out.println("Invalid file name/not an image. Restart the program");
		}
		return img;
	}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem blur;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenuItem hor;
    private javax.swing.JMenuItem invert;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JMenuItem vert;
    // End of variables declaration                   
}
